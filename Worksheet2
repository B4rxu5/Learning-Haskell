module Worksheet2 where

import Prelude hiding (length, sum, product, zip, take, repeat, cycle, (++))

-- 1.1 first thing on a list
headOrZero :: [Int] -> Int
headOrZero(x : xs) = x
headOrZero[] = 0

-- >>> headOrZero []
-- 0

-- 1.2 length of a list
length :: [Int] -> Int
length[] = 0
length(_ : xs) = 1 + length xs
-- >>> length [1, 2, 3, 4]
-- 4

-- 1.3 how the length is evaluated in haskell
-- evaluation steps for length(1:2:[])
-- length[] = 0
-- length(_ : xs) = 1 + length xs
-- Evaluation
-- length(1:2:[])
-- 1 + length(2:[])
-- 1 + 1 + length([])
-- 1 + 1 + 0
-- 1 + 1 
-- 2

-- 1.6 reversing a cons, so appending to the end of a list
snoc :: Int -> [Int] -> [Int]
snoc x [] = [x]
snoc x (y:ys) = y : snoc x ys

-- >>> snoc 3 [1, 2, 2, 3, 4]
-- [1,2,2,3,4,3]


-- 2.1 squaring +ve nos till 3
squaresUpto :: Int -> [Int]
squaresUpto n = [ x*x | x <- [0..n]]

-- >>> squaresUpto 4
-- [0,1,4,9,16]

-- 2.2 finding +ve odds till n
odds :: Int -> [Int]
odds n = [x | x <- [0..n], x `mod` 2 == 1]

-- syntax = [ expression | variable <- range, conditon]

-- >>> odds 13
-- [1,3,5,7,9,11,13]

-- 1.4 sum of all the things in a list 
sum :: [Int] -> Int
sum[] = 0
sum(x : xs) = x + sum xs

-- >>> sum [1, 2, 3, 4, 5]
-- 15

--1.5 product of all things in a list
product :: [Int] -> Int
product[] = 1
product(x : xs) = x* product xs

-- >>> product []
-- 1

-- 1.7 taking n first elements from a list
take :: Int-> [Int] -> [Int]
take _ [] = [] -- if the list is empty, return an empty list
take n _ | n <= 0 = [] -- if n <= 0 also return an empty list
take n (x:xs) = x : take (n-1) xs -- take the first element ( head{x} ) and recurse for the rest

-- >>> take 3 [1, 2, 2, 3, 4, 5]
-- [1,2,2]

-- 1.8 inserting an integer in the corresponding space in the list
insert :: Int -> [Int] -> [Int]
insert x[] = [x] -- if the list is empty just add x 
insert x (y : ys) | x <= y  = x : y : ys
                  |otherwise = y : insert x ys
-- If x is less than or equal to y(the first thing in ys) then add x before that
-- otherwise just keep y and recursively add x to the rest

-- >>> insert 6[1,2,3,4]
-- [1,2,3,4,6]


-- 1.9 sorting the elements of a list
isort :: [Int] -> [Int] 
isort [] = []
isort (x:xs) = insert x (isort xs)

-- >>> isort [1, 2, 3, 5, 7, 1, 3, 2]
-- [1,1,2,2,3,3,5,7]


